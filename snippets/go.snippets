snippet tae "testify/assert.Equal" b
assert.Equal(t, $1, $2)
endsnippet

snippet tan "testify/assert.Nil" b
assert.Nil(t, $1)
endsnippet

snippet tann "testify/assert.NotNil" b
assert.NotNil(t, $1)
endsnippet

snippet tap "testify/assert.Panics" b
assert.Panics(t, func() { $1 }, "should panic, but doesn't")
endsnippet

snippet tanp "testify/assert.NotPanics" b
assert.NotPanics(t, func() { $1 }, "panics, but shouldn't")
endsnippet

snippet taerr "testify/assert.Errorf" b
if tc.$1 {
	assert.Error(t, err)
} else {
	assert.NoError(t, err)
}
endsnippet

snippet tanerr "testify/assert/NoErrorf" b
assert.NoError(t, err)
endsnippet

snippet tc "Test with testcases" b
func Test$1(t *testing.T) {
	cases := []struct{
		name string
		$2
	}{
		{$3},
	}

	for _, tc := range cases {
		t.Run(tc.name, func(t *testing.T) {
			$4
		})
	}
}
endsnippet

snippet tnc "Test without testcases" b
func Test$1(t *testing.T){
	$2
}
endsnippet

snippet handler "func(ResponseWriter, Request)"
func(w http.ResponseWriter, r *http.Request) {
	$1
}
endsnippet

snippet ckerr "if err != nil..."
if err != nil {
	$1
}
endsnippet

snippet todo "TODO text"
TODO: $1 [`date -I`, Ethan Lie]
endsnippet
	
