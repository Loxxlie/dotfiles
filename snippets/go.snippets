snippet tre "testify/require.Equal" b
require.Equal(t, $1, $2)
endsnippet

snippet trt "testify/require.True" b
require.True(t, $1)
endsnippet

snippet trf "testify/require.False" b
require.False(t, $1)
endsnippet

snippet trn "testify/require.Nil" b
require.Nil(t, $1)
endsnippet

snippet trnn "testify/require.NotNil" b
require.NotNil(t, $1)
endsnippet

snippet trp "testify/require.Panics" b
require.Panics(t, func() { $1 }, "should panic, but doesn't")
endsnippet

snippet trnp "testify/require.NotPanics" b
require.NotPanics(t, func() { $1 }, "panics, but shouldn't")
endsnippet

snippet trerr "testify/require.Error" b
require.Error(t, err)
endsnippet

snippet trnerr "testify/require/NoError" b
require.NoError(t, err)
endsnippet

snippet tc "Test with testcases" b
func Test$1(t *testing.T) {
	cases := map[string]struct{
		$2
	}{
		"$3": {$4},
	}

	for name, tc := range cases {
		t.Run(name, func(t *testing.T) {
			$5
		})
	}
}
endsnippet

snippet tnc "Test without testcases" b
func Test$1(t *testing.T){
	$2
}
endsnippet

snippet handler "func(ResponseWriter, Request)"
func(w http.ResponseWriter, r *http.Request) {
	$1
}
endsnippet

snippet ckerr "if err != nil..."
if err != nil {
	$1
}
endsnippet

snippet todo "TODO text"
TODO: $1 [`date -I`, Ethan Lie]
endsnippet
